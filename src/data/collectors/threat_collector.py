"""
Threat-focused data collector
Simulates social media posts about physical danger events in French/German
"""

import time
import random
from typing import List, Dict, Any
from src.processing.text_cleaner import TextCleaner
from src.processing.location_extractor import LocationExtractor
from src.processing.threat_classifier import ThreatClassifier


class ThreatCollector:
    """
    Simulates collecting social media posts about physical threats
    Focused on events requiring police/emergency response
    """
    
    def __init__(self, language: str = 'fr'):
        self.language = language
        self.threat_events = self._get_threat_events(language)
        self.text_cleaner = TextCleaner(language)
        self.location_extractor = LocationExtractor(language)
        self.threat_classifier = ThreatClassifier(language)
        print(f"ðŸš¨ Threat collector initialized for {language} language")
    
    def collect_recent_posts(self, limit: int = 25) -> List[Dict[str, Any]]:
        """
        Generate mock posts about physical threats and emergencies
        """
        posts = []
        
        # Pick 1-2 active threat events
        active_threats = random.sample(self.threat_events, random.randint(1, 2))
        threat_names = [t['name'] for t in active_threats]
        print(f"ðŸš¨ Simulating threats: {threat_names}")
        
        for i in range(limit):
            # 80% chance post is about a threat, 20% normal posts (noise)
            if random.random() < 0.8:
                threat = random.choice(active_threats)
                post_text = random.choice(threat['posts'])
                threat_level = threat['level']
                threat_type = threat['name']
            else:
                post_text = random.choice(self._get_normal_posts(self.language))
                threat_level = "normal"
                threat_type = "daily_life"
            
            post = {
                'id': f'threat_{int(time.time())}_{i}',
                'text': post_text,
                'language': self.language,
                'platform': 'mock',
                'timestamp': time.time() - random.randint(0, 1800),  # Last 30 min
                'user': f'witness_{random.randint(1000, 9999)}',
                'threat_type': threat_type,
                'threat_level': threat_level,
                'urgency': self._calculate_urgency(threat_level, post_text)
            }
            post['clean_text'] = self.text_cleaner.clean_text(post_text)

                        # Extract locations from the original text
            post['locations'] = self.location_extractor.extract_locations(post_text)
            
            # Classify threat based on content
            post['threat_classification'] = self.threat_classifier.classify_threat(post_text)

            posts.append(post)
        
        print(f"ðŸ“Š Collected {len(posts)} posts - {sum(1 for p in posts if p['threat_level'] != 'normal')} threat-related")
        return posts
    
    def _get_threat_events(self, language: str) -> List[Dict]:
        """Physical threat events requiring emergency response"""
        if language == 'fr':
            return [
                {
                    'name': 'Fusillade',
                    'level': 'high',
                    'posts': [
                        "Fusillade en cours prÃ¨s de la station RÃ©publique! Des coups de feu entendus",
                        "Tir actif dans le mÃ©tro, police sur place, Ã©vitez le secteur",
                        "Attention fusillade centre-ville! Prenez refuge immÃ©diatement",
                        "Coups de feu rÃ©pÃ©tÃ©s rue de la Paix, situation confuse",
                        "Tirs entendus gare du Nord, panique gÃ©nÃ©rale #fusillade"
                    ]
                },
                {
                    'name': 'Attaque vÃ©hicule',
                    'level': 'high', 
                    'posts': [
                        "Camion fonce dans la foule sur les Champs-Ã‰lysÃ©es! Nombreux blessÃ©s",
                        "VÃ©hicule bÃ©lier devant la prÃ©fecture, intention terroriste suspectÃ©e",
                        "Voiture folle dans zone piÃ©tonne, fuite du conducteur",
                        "Attaque au vÃ©hicule place Bellecour, cris et panique"
                    ]
                },
                {
                    'name': 'Explosion',
                    'level': 'critical',
                    'posts': [
                        "Grosse explosion entendue prÃ¨s aÃ©roport CDG, fumÃ©e noire visible",
                        "DÃ©tonation centre commercial, vitres brisÃ©es, Ã©vacuation en cours",
                        "Explosion suspecte gare de Lyon, police et secours massifs",
                        "Bruit d'explosion rue de Rivoli, sirÃ¨nes partout"
                    ]
                },
                {
                    'name': 'Agressions arme',
                    'level': 'medium',
                    'posts': [
                        "Homme armÃ© d'un couteau dans le RER B, agressions multiples",
                        "Attaque au couteau marchÃ© aux puces, blessÃ©s graves",
                        "Individu armÃ© fait irruption dans cafÃ©, prise d'otages possible",
                        "Agressions en sÃ©rie avec arme blanche parc Montsouris"
                    ]
                },
                {
                    'name': 'Ã‰meute',
                    'level': 'medium',
                    'posts': [
                        "Affrontements violents police-manifestants, projectiles lancÃ©s",
                        "Ã‰meute en banlieue, voitures incendiÃ©es, magasins pillÃ©s",
                        "Violences urbaines quartier nord, barricades en feu",
                        "Groupe casseurs centre-ville, vitrines brisÃ©es"
                    ]
                }
            ]
        else:  # German
            return [
                {
                    'name': 'SchieÃŸerei',
                    'level': 'high',
                    'posts': [
                        "SchieÃŸerei am Hauptbahnhof! SchÃ¼sse gehÃ¶rt, Polizei im Einsatz",
                        "Aktiver SchÃ¼tze in U-Bahn Station, Bereich absperren",
                        "Notfall: Schusswaffengebrauch Alexanderplatz, Menschen flÃ¼chten",
                        "Wiederholte SchÃ¼sse FriedrichstraÃŸe, Situation unklar",
                        "Kugeln gehÃ¶rt am Ku'damm, allgemeine Panik #SchieÃŸerei"
                    ]
                },
                {
                    'name': 'Fahrzeugangriff',
                    'level': 'high',
                    'posts': [
                        "Laster rast in Menschenmenge am Brandenburger Tor! Viele Verletzte",
                        "Rammfahrzeug vor Rathaus, mutmaÃŸlich terroristischer Hintergrund",
                        "Auto rast durch FuÃŸgÃ¤ngerzone, Fahrer flÃ¼chtig",
                        "Fahrzeugattacke Marienplatz, Schreie und Panik"
                    ]
                },
                {
                    'name': 'Explosion',
                    'level': 'critical',
                    'posts': [
                        "Starke Explosion nahe Flughafen BER, schwarzer Rauch sichtbar",
                        "Detonation Einkaufszentrum, zerbrochene Fenster, Evakuierung lÃ¤uft",
                        "VerdÃ¤chtige Explosion Hauptbahnhof, massive Polizei- und RettungskrÃ¤fte",
                        "ExplosionsgerÃ¤usch Unter den Linden, Sirenen Ã¼berall"
                    ]
                },
                {
                    'name': 'Messerangriffe',
                    'level': 'medium',
                    'posts': [
                        "Mann mit Messer in S-Bahn, mehrere Angriffe gemeldet",
                        "Messerattacke Flohmarkt, schwer verletzte Opfer",
                        "Bewaffneter Eindringling in CafÃ©, mÃ¶gliche Geiselnahme",
                        "Serienangriffe mit Messer im Tiergarten Park"
                    ]
                },
                {
                    'name': 'Krawalle',
                    'level': 'medium',
                    'posts': [
                        "ZusammenstÃ¶ÃŸe Polizei-Demonstranten, Projektile geworfen",
                        "Krawalle Vorstadt, brennende Autos, geplÃ¼nderte GeschÃ¤fte",
                        "Urbane Gewalt Nordviertel, brennende Barrikaden",
                        "Randalierer Innenstadt, eingeschlagene Schaufenster"
                    ]
                }
            ]
    
    def _get_normal_posts(self, language: str) -> List[str]:
        """Normal daily posts (noise)"""
        if language == 'fr':
            return [
                "Beau temps pour une balade aujourd'hui",
                "Quelqu'un a testÃ© le nouveau restaurant italien?",
                "Trafic normal sur le pÃ©riphÃ©rique ce matin",
                "Concert sympa hier soir, bonne ambiance"
            ]
        else:
            return [
                "SchÃ¶nes Wetter fÃ¼r einen Spaziergang heute",
                "Hat jemand das neue italienische Restaurant probiert?",
                "Normaler Verkehr auf dem Ring heute Morgen",
                "Gutes Konzert gestern Abend, tolle Stimmung"
            ]
    
    def _calculate_urgency(self, threat_level: str, text: str) -> str:
        """Calculate urgency based on threat level and content"""
        urgent_words = ['maintenant', 'urgence', 'panique', 'immÃ©diat', 'aktuell', 'sofort', 'Notfall']
        if threat_level == 'critical':
            return 'critical'
        elif threat_level == 'high' and any(word in text.lower() for word in urgent_words):
            return 'high'
        elif threat_level == 'high':
            return 'medium'
        else:
            return 'low'